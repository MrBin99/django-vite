import json
from pathlib import Path
from typing import Dict, List, Union, Tuple
from urllib.parse import urljoin

from django import template
from django.conf import settings
from django.utils.safestring import mark_safe

register = template.Library()


# If using in development or production mode.
DJANGO_VITE_DEV_MODE = getattr(settings, "DJANGO_VITE_DEV_MODE", False)

# Default Vite server protocol (http or https)
DJANGO_VITE_DEV_SERVER_PROTOCOL = getattr(
    settings, "DJANGO_VITE_DEV_SERVER_PROTOCOL", "http"
)

# Default vite server hostname.
DJANGO_VITE_DEV_SERVER_HOST = getattr(
    settings, "DJANGO_VITE_DEV_SERVER_HOST", "localhost"
)

# Default Vite server port.
DJANGO_VITE_DEV_SERVER_PORT = getattr(
    settings, "DJANGO_VITE_DEV_SERVER_PORT", 3000
)

# Default Vite server path to HMR script.
DJANGO_VITE_WS_CLIENT_URL = getattr(
    settings, "DJANGO_VITE_WS_CLIENT_URL", "@vite/client"
)

# Location of Vite compiled assets (only used in Vite production mode).
# Must be included in your "STATICFILES_DIRS".
# In Django production mode this folder need to be collected as static
# files using "python manage.py collectstatic".
DJANGO_VITE_ASSETS_PATH = Path(getattr(settings, "DJANGO_VITE_ASSETS_PATH"))

# Prefix for STATIC_URL
DJANGO_VITE_STATIC_URL_PREFIX = getattr(
    settings, "DJANGO_VITE_STATIC_URL_PREFIX", ""
)

DJANGO_VITE_STATIC_ROOT = (
    DJANGO_VITE_ASSETS_PATH
    if DJANGO_VITE_DEV_MODE
    else Path(settings.STATIC_ROOT) / DJANGO_VITE_STATIC_URL_PREFIX
)

# Path to your manifest file generated by Vite.
# Should by in "DJANGO_VITE_ASSETS_PATH".
DJANGO_VITE_MANIFEST_PATH = getattr(
    settings,
    "DJANGO_VITE_MANIFEST_PATH",
    DJANGO_VITE_STATIC_ROOT / "manifest.json",
)

# Motif in the 'manifest.json' to find the polyfills generated by Vite.
DJANGO_VITE_LEGACY_POLYFILLS_MOTIF = getattr(
    settings, "DJANGO_VITE_LEGACY_POLYFILLS_MOTIF", "legacy-polyfills"
)

DJANGO_VITE = getattr(
    settings, "DJANGO_VITE", {
        'default': {
            'port': DJANGO_VITE_DEV_SERVER_PORT,
            'manifest_path': DJANGO_VITE_MANIFEST_PATH,
            'static_url_prefix': DJANGO_VITE_STATIC_URL_PREFIX,
            'dev_mode': DJANGO_VITE_DEV_MODE,
        }
    }
)


def get_django_vite_static_url(static_url_prefix: str) -> str:
    static_url = urljoin(settings.STATIC_URL, static_url_prefix)

    # Make sure 'static_url' finish with a '/'
    if static_url[-1] != "/":
        static_url += "/"

    return static_url


class DjangoViteAssetLoader:
    """
    Class handling Vite asset loading.
    """

    _instance = None

    def __init__(self) -> None:
        raise RuntimeError("Use the instance() method instead.")

    def generate_vite_asset(
        self,
        path: str,
        manifest_path: str,
        port: int,
        static_url_prefix: str,
        dev_mode: bool,
        **kwargs: Dict[str, str],
    ) -> str:
        """
        Generates a <script> tag for this JS/TS asset and a <link> tag for
        all of its CSS dependencies by reading the manifest
        file (for production only).
        In development Vite loads all by itself.

        Arguments:
            path {str} -- Path to a Vite JS/TS asset to include.

        Returns:
            str -- All tags to import this file in your HTML page.

        Keyword Arguments:
            **kwargs {Dict[str, str]} -- Adds new attributes to generated
                script tags.

        Raises:
            RuntimeError: If cannot find the file path in the
                manifest (only in production).

        Returns:
            str -- The <script> tag and all <link> tags to import
                this asset in your page.
        """

        if dev_mode:
            return DjangoViteAssetLoader._generate_script_tag(
                DjangoViteAssetLoader._generate_vite_server_url(path, port, static_url_prefix),
                {"type": "module"},
            )

        if not self._manifests[manifest_path] or path not in self._manifests[manifest_path]:
            raise RuntimeError(
                f"Cannot find {path} in Vite manifest "
                f"at {manifest_path}"
            )

        tags = []
        manifest_entry = self._manifests[manifest_path][path]
        scripts_attrs = {"type": "module", "crossorigin": "", **kwargs}

        # Add dependent CSS
        tags.extend(self._generate_css_files_of_asset(path, manifest_path, static_url_prefix, []))

        # Add the script by itself
        tags.append(
            DjangoViteAssetLoader._generate_script_tag(
                urljoin(get_django_vite_static_url(static_url_prefix), manifest_entry["file"]),
                attrs=scripts_attrs,
            )
        )

        return "\n".join(tags)

    def _generate_css_files_of_asset(
        self, path: str, manifest_path: str, static_url_prefix: str, already_processed: List[str]
    ) -> List[str]:
        """
        Generates all CSS tags for dependencies of an asset.

        Arguments:
            path {str} -- Path to an asset in the 'manifest.json'.
            already_processed {list} -- List of already processed CSS file.

        Returns:
            list -- List of CSS tags.
        """

        tags = []
        manifest_entry = self._manifests[manifest_path][path]

        if "imports" in manifest_entry:
            for import_path in manifest_entry["imports"]:
                tags.extend(
                    self._generate_css_files_of_asset(
                        import_path, manifest_path, static_url_prefix, already_processed
                    )
                )

        if "css" in manifest_entry:
            for css_path in manifest_entry["css"]:
                if css_path not in already_processed:
                    tags.append(
                        DjangoViteAssetLoader._generate_stylesheet_tag(
                            urljoin(get_django_vite_static_url(static_url_prefix), css_path)
                        )
                    )

                already_processed.append(css_path)

        return tags

    def generate_vite_asset_url(self, path: str, manifest_path: str, port: int, static_url_prefix: str, dev_mode: bool) -> str:
        """
        Generates only the URL of an asset managed by ViteJS.
        Warning, this function does not generate URLs for dependant assets.

        Arguments:
            path {str} -- Path to a Vite asset.

        Raises:
            RuntimeError: If cannot find the asset path in the
                manifest (only in production).

        Returns:
            str -- The URL of this asset.
        """

        if dev_mode:
            return DjangoViteAssetLoader._generate_vite_server_url(path, port, static_url_prefix)

        if not self._manifests or path not in self._manifests[manifest_path]:
            raise RuntimeError(
                f"Cannot find {path} in Vite manifest "
                f"at {manifest_path}"
            )

        return urljoin(get_django_vite_static_url(static_url_prefix), self._manifests[manifest_path][path]["file"])

    def generate_vite_legacy_polyfills(
        self,
        manifest_path: str,
        static_url_prefix: str,
        dev_mode: bool,
        **kwargs: Dict[str, str],
    ) -> str:
        """
        Generates a <script> tag to the polyfills
        generated by '@vitejs/plugin-legacy' if used.
        This tag must be included at end of the <body> before
        including other legacy scripts.

        Keyword Arguments:
            **kwargs {Dict[str, str]} -- Adds new attributes to generated
                script tags.

        Raises:
            RuntimeError: If polyfills path not found inside
                the 'manifest.json' (only in production).

        Returns:
            str -- The script tag to the polyfills.
        """

        if dev_mode:
            return ""

        scripts_attrs = {"nomodule": "", "crossorigin": "", **kwargs}

        for path, content in self._manifests[manifest_path].items():
            if DJANGO_VITE_LEGACY_POLYFILLS_MOTIF in path:
                return DjangoViteAssetLoader._generate_script_tag(
                    urljoin(get_django_vite_static_url(static_url_prefix), content["file"]),
                    attrs=scripts_attrs,
                )

        raise RuntimeError(
            f"Vite legacy polyfills not found in manifest "
            f"at {manifest_path}"
        )

    def generate_vite_legacy_asset(
        self,
        path: str,
        manifest_path: str,
        static_url_prefix: str,
        dev_mode: bool,
        **kwargs: Dict[str, str],
    ) -> str:
        """
        Generates a <script> tag for legacy assets JS/TS
        generated by '@vitejs/plugin-legacy'
        (in production only, in development do nothing).

        Arguments:
            path {str} -- Path to a Vite asset to include
                (must contains '-legacy' in its name).

        Keyword Arguments:
            **kwargs {Dict[str, str]} -- Adds new attributes to generated
                script tags.

        Raises:
            RuntimeError: If cannot find the asset path in the
                manifest (only in production).

        Returns:
            str -- The script tag of this legacy asset .
        """

        if dev_mode:
            return ""

        if not self._manifests or path not in self._manifests[manifest_path]:
            raise RuntimeError(
                f"Cannot find {path} in Vite manifest "
                f"at {DJANGO_VITE_MANIFEST_PATH}"
            )

        manifest_entry = self._manifests[manifest_path][path]
        scripts_attrs = {"nomodule": "", "crossorigin": "", **kwargs}

        return DjangoViteAssetLoader._generate_script_tag(
            urljoin(get_django_vite_static_url(static_url_prefix), manifest_entry["file"]),
            attrs=scripts_attrs,
        )

    def _parse_manifest(self, manifest_path) -> None:
        """
        Read and parse the Vite manifest file.

        Raises:
            RuntimeError: if cannot load the file or JSON in file is malformed.
        """

        try:
            manifest_file = open(manifest_path, "r")
            manifest_content = manifest_file.read()
            manifest_file.close()
            self._manifests[manifest_path] = json.loads(manifest_content)
        except Exception as error:
            raise RuntimeError(
                f"Cannot read Vite manifest file at "
                f"{manifest_path} : {str(error)}"
            )

    @classmethod
    def instance(cls, manifest_path: str = DJANGO_VITE_MANIFEST_PATH, dev_mode: bool = DJANGO_VITE_DEV_MODE):
        """
        Singleton.
        Uses singleton to keep parsed manifest in memory after
        the first time it's loaded.

        Returns:
            DjangoViteAssetLoader -- only instance of the class.
        """

        if cls._instance is None:
            cls._instance = cls.__new__(cls)
            cls._instance._manifests = {}

        # Manifest is only used in production.
        if not dev_mode and manifest_path not in cls._instance._manifests:
            cls._instance._parse_manifest(manifest_path)

        return cls._instance

    @classmethod
    def generate_vite_ws_client(cls, port: int, static_url_prefix: str, dev_mode: bool) -> str:
        """
        Generates the script tag for the Vite WS client for HMR.
        Only used in development, in production this method returns
        an empty string.

        Returns:
            str -- The script tag or an empty string.
        """

        if not dev_mode:
            return ""

        return cls._generate_script_tag(
            cls._generate_vite_server_url(DJANGO_VITE_WS_CLIENT_URL, port, static_url_prefix),
            {"type": "module"},
        )

    @staticmethod
    def _generate_script_tag(src: str, attrs: Dict[str, str]) -> str:
        """
        Generates an HTML script tag.

        Arguments:
            src {str} -- Source of the script.

        Keyword Arguments:
            attrs {Dict[str, str]} -- List of custom attributes
                for the tag.

        Returns:
            str -- The script tag.
        """

        attrs_str = " ".join(
            [f'{key}="{value}"' for key, value in attrs.items()]
        )

        return f'<script {attrs_str} src="{src}"></script>'

    @staticmethod
    def _generate_stylesheet_tag(href: str) -> str:
        """
        Generates and HTML <link> stylesheet tag for CSS.

        Arguments:
            href {str} -- CSS file URL.

        Returns:
            str -- CSS link tag.
        """

        return f'<link rel="stylesheet" href="{href}" />'

    @staticmethod
    def _generate_vite_server_url(path: str, port: int, static_url_prefix: str) -> str:
        """
        Generates an URL to and asset served by the Vite development server.

        Keyword Arguments:
            path {str} -- Path to the asset.

        Returns:
            str -- Full URL to the asset.
        """

        return urljoin(
            f"{DJANGO_VITE_DEV_SERVER_PROTOCOL}://"
            f"{DJANGO_VITE_DEV_SERVER_HOST}:{port}",
            urljoin(get_django_vite_static_url(static_url_prefix), path),
        )


# Make Loader instance at startup to prevent threading problems
DjangoViteAssetLoader.instance()


def get_config(config: Union[str, dict]) -> Tuple[str, int, str, bool]:
    if isinstance(config, str):
        if config not in DJANGO_VITE:
            raise RuntimeError(f"Config \"{config}\" is not found in DJANGO_VITE")

        config = DJANGO_VITE[config]

    manifest_path = config['manifest_path']
    port = config['port']
    static_url_prefix = config['static_url_prefix']
    dev_mode = config['dev_mode']
    return manifest_path, port, static_url_prefix, dev_mode


@register.simple_tag
@mark_safe
def vite_hmr_client(config: Union[str, dict] = 'default') -> str:
    """
    Generates the script tag for the Vite WS client for HMR.
    Only used in development, in production this method returns
    an empty string.

    Returns:
        str -- The script tag or an empty string.
    """

    manifest_path, port, static_url_prefix, dev_mode = get_config(config)

    return DjangoViteAssetLoader.generate_vite_ws_client(port, static_url_prefix, dev_mode)


@register.simple_tag
@mark_safe
def vite_asset(path: str, config: Union[str, dict] = 'default', **kwargs: Dict[str, str]) -> str:
    """
    Generates a <script> tag for this JS/TS asset and a <link> tag for
    all of its CSS dependencies by reading the manifest
    file (for production only).
    In development Vite loads all by itself.

    Arguments:
        path {str} -- Path to a Vite JS/TS asset to include.

    Returns:
        str -- All tags to import this file in your HTML page.

    Keyword Arguments:
        **kwargs {Dict[str, str]} -- Adds new attributes to generated
            script tags.

    Raises:
        RuntimeError: If cannot find the file path in the
            manifest (only in production).

    Returns:
        str -- The <script> tag and all <link> tags to import this
            asset in your page.
    """

    assert path is not None

    manifest_path, port, static_url_prefix, dev_mode = get_config(config)

    return DjangoViteAssetLoader.instance(manifest_path, dev_mode).generate_vite_asset(path, manifest_path, port, static_url_prefix, dev_mode, **kwargs)


@register.simple_tag
def vite_asset_url(path: str, config: Union[str, dict] = 'default') -> str:
    """
    Generates only the URL of an asset managed by ViteJS.
    Warning, this function does not generate URLs for dependant assets.

    Arguments:
        path {str} -- Path to a Vite asset.

    Raises:
        RuntimeError: If cannot find the asset path in the
            manifest (only in production).

    Returns:
        str -- The URL of this asset.
    """

    assert path is not None

    manifest_path, port, static_url_prefix, dev_mode = get_config(config)

    return DjangoViteAssetLoader.instance(manifest_path, dev_mode).generate_vite_asset_url(path, manifest_path, port, static_url_prefix, dev_mode)


@register.simple_tag
@mark_safe
def vite_legacy_polyfills(config: Union[str, dict] = 'default', **kwargs: Dict[str, str]) -> str:
    """
    Generates a <script> tag to the polyfills generated
    by '@vitejs/plugin-legacy' if used.
    This tag must be included at end of the <body> before including
    other legacy scripts.

    Keyword Arguments:
        **kwargs {Dict[str, str]} -- Adds new attributes to generated
            script tags.

    Raises:
        RuntimeError: If polyfills path not found inside
            the 'manifest.json' (only in production).

    Returns:
        str -- The script tag to the polyfills.
    """

    manifest_path, port, static_url_prefix, dev_mode = get_config(config)

    return DjangoViteAssetLoader.instance(manifest_path, dev_mode).generate_vite_legacy_polyfills(manifest_path, static_url_prefix, dev_mode, **kwargs)


@register.simple_tag
@mark_safe
def vite_legacy_asset(path: str, config: Union[str, dict] = 'default', **kwargs: Dict[str, str]) -> str:
    """
    Generates a <script> tag for legacy assets JS/TS
    generated by '@vitejs/plugin-legacy'
    (in production only, in development do nothing).

    Arguments:
        path {str} -- Path to a Vite asset to include
            (must contains '-legacy' in its name).

    Keyword Arguments:
        **kwargs {Dict[str, str]} -- Adds new attributes to generated
            script tags.

    Raises:
        RuntimeError: If cannot find the asset path in
            the manifest (only in production).

    Returns:
        str -- The script tag of this legacy asset .
    """

    assert path is not None

    manifest_path, port, static_url_prefix, dev_mode = get_config(config)

    return DjangoViteAssetLoader.instance(manifest_path, dev_mode).generate_vite_legacy_asset(
        path, manifest_path, static_url_prefix, dev_mode, **kwargs
    )
